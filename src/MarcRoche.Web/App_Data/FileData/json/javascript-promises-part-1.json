{"Author":"marcroche","Content":"##JavaScript Promises Part 1: Looking at jQuery and Q\r\n\r\n<div>\r\n\t<time class=\"postinfo left-50 postdate\">December 8, 2013</time>\r\n</div>\r\n\r\nPromises provide a method of programming asynchronously in javascript. Prior to promises the most common technique was the use of callbacks. And although callbacks worked fine, they were incredibly tough to follow and difficult to maintain.\r\n\r\nJavaScript promises are formally defined by <a href=\"http://wiki.commonjs.org/wiki/Promises\" target=\"_blank\">CommonJS</a>. There are many implementations that have been developed, but two that will serve you best in both client and server development are jQuery and Q implementations.\r\n\r\nLet's create a very basic scenario. \r\n\r\nWe are waiting for a countdown to complete before we can continue further processing. When the countdown does complete, it gives us a 'promise' that it will let us know it is done. <a href='/BlogArtifacts/javascript-promises-part-1/javascript-promises.html' target=\"_blank\">Click here</a> for a live example.\r\n\r\nThe main application is pretty simple. We create our 'Timer Models' and we wait for processing to occur:\r\n\r\n```JavaScript\r\nvar timer = new TimerModel_jQuery();\r\n\r\ntimer.startCountDown(10).progress(function (data) {\r\n    $('#timer').text(data.time);\r\n}).then(function () {\r\n    $('#timer').text('Blast off!');\r\n\r\n    var timer2 = new TimerModel_Q();\r\n    timer2.startCountDown(10).progress(function (data) {\r\n        $('#timer2').text(data.time);\r\n    }).then(function () {\r\n        $('#timer2').text('Blast off!');\r\n        $('#message').text('Both promises have been resolved.')\r\n    });\r\n});\r\n```\r\n\r\nThe inner workings of setting up a promise can be viewed by reviewing the models.\r\n\r\nFirst the jQuery Model:\r\n\r\n```JavaScript\r\nvar TimerModel_jQuery = function () {\r\n    var self = this;\r\n\r\n    this.currentTime = 0;\r\n\r\n    this.startCountDown = function (initialTime) {\r\n        var deferred = $.Deferred();\r\n        this.currentTime = initialTime;\r\n\r\n        var counter = setInterval(function () {\r\n            self.currentTime = self.currentTime - 1;\r\n            deferred.notify({\r\n                time: self.currentTime\r\n            });\r\n\r\n            if (self.currentTime <= 0) {\r\n                clearInterval(counter);\r\n                deferred.resolve();\r\n            }\r\n        }, 1000);\r\n\r\n        return deferred.promise();\r\n    };\r\n};\r\n```\r\n\r\nAnd now the Q model which is identical in all but a couple of minor syntactical nuances:\r\n\r\n```JavaScript\r\nvar TimerModel_Q = function () {\r\n    var self = this;\r\n\r\n    this.currentTime = 0;\r\n\r\n    this.startCountDown = function (initialTime) {\r\n        var deferred = Q.defer();\r\n        this.currentTime = initialTime;\r\n\r\n        var counter = setInterval(function () {\r\n            self.currentTime = self.currentTime - 1;\r\n            deferred.notify({\r\n                time: self.currentTime\r\n            });\r\n\r\n            if (self.currentTime <= 0) {\r\n                clearInterval(counter);\r\n                deferred.resolve();\r\n            }\r\n        }, 1000);\r\n\r\n        return deferred.promise;\r\n    };\r\n};\r\n```","HtmlContent":"<h2>JavaScript Promises Part 1: Looking at jQuery and Q</h2>\r\n\r\n<div>\r\n    <time class=\"postinfo left-50 postdate\">December 8, 2013</time>\r\n</div>\r\n\r\n<p>Promises provide a method of programming asynchronously in javascript. Prior to promises the most common technique was the use of callbacks. And although callbacks worked fine, they were incredibly tough to follow and difficult to maintain.</p>\r\n\r\n<p>JavaScript promises are formally defined by <a href=\"http://wiki.commonjs.org/wiki/Promises\" target=\"_blank\">CommonJS</a>. There are many implementations that have been developed, but two that will serve you best in both client and server development are jQuery and Q implementations.</p>\r\n\r\n<p>Let's create a very basic scenario. </p>\r\n\r\n<p>We are waiting for a countdown to complete before we can continue further processing. When the countdown does complete, it gives us a 'promise' that it will let us know it is done. <a href='/BlogArtifacts/javascript-promises-part-1/javascript-promises.html' target=\"_blank\">Click here</a> for a live example.</p>\r\n\r\n<p>The main application is pretty simple. We create our 'Timer Models' and we wait for processing to occur:</p>\r\n\r\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> timer = <span style=\"color:Blue;\">new</span> TimerModel_jQuery();\r\n\r\ntimer.startCountDown(10).progress(<span style=\"color:Blue;\">function</span> (data) {\r\n    $(<span style=\"color:#A31515;\">&#39;#timer&#39;</span>).text(data.time);\r\n}).then(<span style=\"color:Blue;\">function</span> () {\r\n    $(<span style=\"color:#A31515;\">&#39;#timer&#39;</span>).text(<span style=\"color:#A31515;\">&#39;Blast off!&#39;</span>);\r\n\r\n    <span style=\"color:Blue;\">var</span> timer2 = <span style=\"color:Blue;\">new</span> TimerModel_Q();\r\n    timer2.startCountDown(10).progress(<span style=\"color:Blue;\">function</span> (data) {\r\n        $(<span style=\"color:#A31515;\">&#39;#timer2&#39;</span>).text(data.time);\r\n    }).then(<span style=\"color:Blue;\">function</span> () {\r\n        $(<span style=\"color:#A31515;\">&#39;#timer2&#39;</span>).text(<span style=\"color:#A31515;\">&#39;Blast off!&#39;</span>);\r\n        $(<span style=\"color:#A31515;\">&#39;#message&#39;</span>).text(<span style=\"color:#A31515;\">&#39;Both promises have been resolved.&#39;</span>)\r\n    });\r\n});\r\n</pre></div>\r\n\r\n<p>The inner workings of setting up a promise can be viewed by reviewing the models.</p>\r\n\r\n<p>First the jQuery Model:</p>\r\n\r\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> TimerModel_jQuery = <span style=\"color:Blue;\">function</span> () {\r\n    <span style=\"color:Blue;\">var</span> self = <span style=\"color:Blue;\">this</span>;\r\n\r\n    <span style=\"color:Blue;\">this</span>.currentTime = 0;\r\n\r\n    <span style=\"color:Blue;\">this</span>.startCountDown = <span style=\"color:Blue;\">function</span> (initialTime) {\r\n        <span style=\"color:Blue;\">var</span> deferred = $.Deferred();\r\n        <span style=\"color:Blue;\">this</span>.currentTime = initialTime;\r\n\r\n        <span style=\"color:Blue;\">var</span> counter = setInterval(<span style=\"color:Blue;\">function</span> () {\r\n            self.currentTime = self.currentTime - 1;\r\n            deferred.notify({\r\n                time: self.currentTime\r\n            });\r\n\r\n            <span style=\"color:Blue;\">if</span> (self.currentTime &lt;= 0) {\r\n                clearInterval(counter);\r\n                deferred.resolve();\r\n            }\r\n        }, 1000);\r\n\r\n        <span style=\"color:Blue;\">return</span> deferred.promise();\r\n    };\r\n};\r\n</pre></div>\r\n\r\n<p>And now the Q model which is identical in all but a couple of minor syntactical nuances:</p>\r\n\r\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> TimerModel_Q = <span style=\"color:Blue;\">function</span> () {\r\n    <span style=\"color:Blue;\">var</span> self = <span style=\"color:Blue;\">this</span>;\r\n\r\n    <span style=\"color:Blue;\">this</span>.currentTime = 0;\r\n\r\n    <span style=\"color:Blue;\">this</span>.startCountDown = <span style=\"color:Blue;\">function</span> (initialTime) {\r\n        <span style=\"color:Blue;\">var</span> deferred = Q.defer();\r\n        <span style=\"color:Blue;\">this</span>.currentTime = initialTime;\r\n\r\n        <span style=\"color:Blue;\">var</span> counter = setInterval(<span style=\"color:Blue;\">function</span> () {\r\n            self.currentTime = self.currentTime - 1;\r\n            deferred.notify({\r\n                time: self.currentTime\r\n            });\r\n\r\n            <span style=\"color:Blue;\">if</span> (self.currentTime &lt;= 0) {\r\n                clearInterval(counter);\r\n                deferred.resolve();\r\n            }\r\n        }, 1000);\r\n\r\n        <span style=\"color:Blue;\">return</span> deferred.promise;\r\n    };\r\n};\r\n</pre></div>\r\n","Id":"fa363015-0946-4175-b44d-491aeb7cdc38","PublishDate":"2013-12-08T00:00:00","Tags":[],"Title":"JavaScript Promises Part 1","Comments":[],"SearchableContent":""}