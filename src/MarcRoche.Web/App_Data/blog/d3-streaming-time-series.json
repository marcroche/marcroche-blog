{"Author":"marcroche","Content":"#D3 Streaming Time Series\r\n\r\n<div>\r\n\t<time class=\"postinfo left-50 postdate\">December 21, 2013</time>\r\n</div>\r\n\r\n<div class=\"chart-container\"></div>\r\n<button onclick='appNs.chart.start()'>Start</button>\r\n<button onclick='appNs.chart.stop()'>Stop</button>\r\n\r\nSo I have started diving into the Data Driven Documents (D3) library and decided to start off with an easy project. In particular I wanted something I could get my hands dirty with and also knock out in an hour or two.\r\n\r\nI decided to create a streaming time series graph. The graph is intended to be updating in real time with data streamed from a backend server via WebSockets.\r\n\r\nHowever for this blog and the clarity of the exercise I created a data function that returns a normalized set of data on a cosine wave. And to add a little extra interest I have the color fill cycling on a set period.\r\n\r\nThe last requirement, as with all of my posts, is that it is responsive and renders well on mobile devices.\r\n\r\nHere's the code!\r\n\r\n```JavaScript\r\nvar appNs = appNs || {};\r\n\r\nappNs.TimeSeriesChart = function (height, container, elementCount) {\r\n    var self = this;\r\n    var margin = { top: 0, right: 00, bottom: 00, left: 0 };\r\n    var w = parseInt(d3.select(container).style('width'), 10);\r\n    w = w - margin.left - margin.right;\r\n    var h = height;\r\n    var hColor = 0;\r\n    d3.select(window).on('resize', resize);\r\n    \r\n    self.data = [];\r\n    self.key = 0;\r\n    self.cnt = 0;\r\n    self.hColor = 0;\r\n    self.isRunning = true;\r\n    self.DataPoint = function (key, value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    };\r\n    self.initializeData(elementCount);\r\n    self.scaleX = d3.scale.linear()\r\n\t\t.domain([0, 1])\r\n\t\t.range([0, w]);\r\n    self.scaleY = d3.scale.linear()\r\n\t\t.domain([0, 100])\r\n\t\t.rangeRound([0, h]);\r\n    self.svg = d3.select(container)\r\n\t\t.append(\"svg\")\r\n\t\t.attr(\"width\", w)\r\n\t\t.attr(\"height\", h)\r\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\r\n        .attr(\"viewBox\", \"0 0 \" + w + \" 50\")\r\n        .attr(\"class\", \"svg-content\");\r\n    self.svg.selectAll(\"rect\")\r\n\t\t.data(self.data)\r\n\t\t.enter()\r\n\t\t.append(\"rect\")\r\n\t\t.attr(\"x\", function (obj, index) {\r\n\t\t    return index * (w / elementCount);\r\n\t\t})\r\n\t\t.attr(\"y\", 0)\r\n\t\t.attr(\"width\", w / elementCount - 1.5)\r\n\t\t.attr(\"height\", function (obj) {\r\n\t\t    return obj.value * 10;\r\n\t\t});\r\n\r\n    self.counter = setInterval(runner, 150);\r\n\r\n    function runner() {\r\n        for (var i = self.data.length - 1; i > 0; i--) {\r\n            self.data[i].value = self.data[i - 1].value;\r\n        }\r\n        self.data[0].value = self.getData(self.cnt++ / 3);\r\n\r\n        self.svg.selectAll(\"rect\")\r\n            .data(self.data)\r\n            .transition()\r\n            .duration(150)\r\n            .attr(\"x\", function (obj, index) {\r\n                return index * (w / elementCount);\r\n            })\r\n            .attr(\"y\", function (d) {\r\n                return h - self.scaleY(d.value * 10) - 0.5;\r\n            })\r\n            .attr(\"width\", w / elementCount - 1.5)\r\n            .attr(\"height\", function (d) {\r\n                return self.scaleY(d.value * 10);\r\n            })\r\n            .attr(\"fill\", function (a, b) {\r\n                self.hColor + 0.1 > 360 ? self.hColor = 0 : self.hColor += 0.1;\r\n                return \"hsl(\" + self.hColor + \", 75%, 25%)\";\r\n            });\r\n    }\r\n\r\n    function resize() {\r\n        w = parseInt(d3.select(container).style('width'), 10);\r\n        w = w - margin.left - margin.right;\r\n\r\n        self.scaleX.range([0, w]);\r\n\r\n        self.svg\r\n            .attr(\"width\", w)\r\n            .attr(\"viewBox\", \"0 0 \" + w + \" 50\");\r\n    }\r\n\r\n\r\n    self.run = function () {\r\n        runner();\r\n    };\r\n};\r\n\r\nappNs.TimeSeriesChart.prototype.initializeData = function (elementCount) {\r\n    var self = this;\r\n    for (var i = 0; i < elementCount; i++) {\r\n        self.data.push(new self.DataPoint(self.key++, 0));\r\n    }\r\n};\r\n\r\nappNs.TimeSeriesChart.prototype.getData = function (x) {\r\n    return 5 * (Math.cos(x / 1.5) + 1);\r\n};\r\n\r\nappNs.TimeSeriesChart.prototype.start = function () {\r\n    var self = this;\r\n    if (!self.isRunning) {\r\n        self.counter = setInterval(self.run, 150);\r\n    }\r\n    self.isRunning = true;\r\n};\r\n\r\nappNs.TimeSeriesChart.prototype.stop = function () {\r\n    var self = this;\r\n    clearInterval(self.counter);\r\n    self.isRunning = false;\r\n};\r\n\r\nappNs.chart = new appNs.TimeSeriesChart(50, '.chart-container', 25);\r\n```\r\n\r\nI have set aside an exercise for myself to come back and re-create this strictly in html and css. \r\n\r\nIn the meantime I also intend to dive deeper into the D3 library and continue to blog along the way!","HtmlContent":"<h1>D3 Streaming Time Series</h1>\r\n\r\n<div>\r\n    <time class=\"postinfo left-50 postdate\">December 21, 2013</time>\r\n</div>\r\n\r\n<div class=\"chart-container\"></div>\r\n\r\n<p><button onclick='appNs.chart.start()'>Start</button>\r\n<button onclick='appNs.chart.stop()'>Stop</button></p>\r\n\r\n<p>So I have started diving into the Data Driven Documents (D3) library and decided to start off with an easy project. In particular I wanted something I could get my hands dirty with and also knock out in an hour or two.</p>\r\n\r\n<p>I decided to create a streaming time series graph. The graph is intended to be updating in real time with data streamed from a backend server via WebSockets.</p>\r\n\r\n<p>However for this blog and the clarity of the exercise I created a data function that returns a normalized set of data on a cosine wave. And to add a little extra interest I have the color fill cycling on a set period.</p>\r\n\r\n<p>The last requirement, as with all of my posts, is that it is responsive and renders well on mobile devices.</p>\r\n\r\n<p>Here's the code!</p>\r\n\r\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> appNs = appNs || {};\r\n\r\nappNs.TimeSeriesChart = <span style=\"color:Blue;\">function</span> (height, container, elementCount) {\r\n    <span style=\"color:Blue;\">var</span> self = <span style=\"color:Blue;\">this</span>;\r\n    <span style=\"color:Blue;\">var</span> margin = { top: 0, right: 00, bottom: 00, left: 0 };\r\n    <span style=\"color:Blue;\">var</span> w = parseInt(d3.select(container).style(<span style=\"color:#A31515;\">&#39;width&#39;</span>), 10);\r\n    w = w - margin.left - margin.right;\r\n    <span style=\"color:Blue;\">var</span> h = height;\r\n    <span style=\"color:Blue;\">var</span> hColor = 0;\r\n    d3.select(window).on(<span style=\"color:#A31515;\">&#39;resize&#39;</span>, resize);\r\n\r\n    self.data = [];\r\n    self.key = 0;\r\n    self.cnt = 0;\r\n    self.hColor = 0;\r\n    self.isRunning = <span style=\"color:Blue;\">true</span>;\r\n    self.DataPoint = <span style=\"color:Blue;\">function</span> (key, value) {\r\n        <span style=\"color:Blue;\">this</span>.key = key;\r\n        <span style=\"color:Blue;\">this</span>.value = value;\r\n    };\r\n    self.initializeData(elementCount);\r\n    self.scaleX = d3.scale.linear()\r\n        .domain([0, 1])\r\n        .range([0, w]);\r\n    self.scaleY = d3.scale.linear()\r\n        .domain([0, 100])\r\n        .rangeRound([0, h]);\r\n    self.svg = d3.select(container)\r\n        .append(<span style=\"color:#A31515;\">&quot;svg&quot;</span>)\r\n        .attr(<span style=\"color:#A31515;\">&quot;width&quot;</span>, w)\r\n        .attr(<span style=\"color:#A31515;\">&quot;height&quot;</span>, h)\r\n        .attr(<span style=\"color:#A31515;\">&quot;preserveAspectRatio&quot;</span>, <span style=\"color:#A31515;\">&quot;xMinYMin meet&quot;</span>)\r\n        .attr(<span style=\"color:#A31515;\">&quot;viewBox&quot;</span>, <span style=\"color:#A31515;\">&quot;0 0 &quot;</span> + w + <span style=\"color:#A31515;\">&quot; 50&quot;</span>)\r\n        .attr(<span style=\"color:#A31515;\">&quot;class&quot;</span>, <span style=\"color:#A31515;\">&quot;svg-content&quot;</span>);\r\n    self.svg.selectAll(<span style=\"color:#A31515;\">&quot;rect&quot;</span>)\r\n        .data(self.data)\r\n        .enter()\r\n        .append(<span style=\"color:#A31515;\">&quot;rect&quot;</span>)\r\n        .attr(<span style=\"color:#A31515;\">&quot;x&quot;</span>, <span style=\"color:Blue;\">function</span> (obj, index) {\r\n            <span style=\"color:Blue;\">return</span> index * (w / elementCount);\r\n        })\r\n        .attr(<span style=\"color:#A31515;\">&quot;y&quot;</span>, 0)\r\n        .attr(<span style=\"color:#A31515;\">&quot;width&quot;</span>, w / elementCount - 1.5)\r\n        .attr(<span style=\"color:#A31515;\">&quot;height&quot;</span>, <span style=\"color:Blue;\">function</span> (obj) {\r\n            <span style=\"color:Blue;\">return</span> obj.value * 10;\r\n        });\r\n\r\n    self.counter = setInterval(runner, 150);\r\n\r\n    <span style=\"color:Blue;\">function</span> runner() {\r\n        <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">var</span> i = self.data.length - 1; i &gt; 0; i--) {\r\n            self.data[i].value = self.data[i - 1].value;\r\n        }\r\n        self.data[0].value = self.getData(self.cnt++ / 3);\r\n\r\n        self.svg.selectAll(<span style=\"color:#A31515;\">&quot;rect&quot;</span>)\r\n            .data(self.data)\r\n            .transition()\r\n            .duration(150)\r\n            .attr(<span style=\"color:#A31515;\">&quot;x&quot;</span>, <span style=\"color:Blue;\">function</span> (obj, index) {\r\n                <span style=\"color:Blue;\">return</span> index * (w / elementCount);\r\n            })\r\n            .attr(<span style=\"color:#A31515;\">&quot;y&quot;</span>, <span style=\"color:Blue;\">function</span> (d) {\r\n                <span style=\"color:Blue;\">return</span> h - self.scaleY(d.value * 10) - 0.5;\r\n            })\r\n            .attr(<span style=\"color:#A31515;\">&quot;width&quot;</span>, w / elementCount - 1.5)\r\n            .attr(<span style=\"color:#A31515;\">&quot;height&quot;</span>, <span style=\"color:Blue;\">function</span> (d) {\r\n                <span style=\"color:Blue;\">return</span> self.scaleY(d.value * 10);\r\n            })\r\n            .attr(<span style=\"color:#A31515;\">&quot;fill&quot;</span>, <span style=\"color:Blue;\">function</span> (a, b) {\r\n                self.hColor + 0.1 &gt; 360 ? self.hColor = 0 : self.hColor += 0.1;\r\n                <span style=\"color:Blue;\">return</span> <span style=\"color:#A31515;\">&quot;hsl(&quot;</span> + self.hColor + <span style=\"color:#A31515;\">&quot;, 75%, 25%)&quot;</span>;\r\n            });\r\n    }\r\n\r\n    <span style=\"color:Blue;\">function</span> resize() {\r\n        w = parseInt(d3.select(container).style(<span style=\"color:#A31515;\">&#39;width&#39;</span>), 10);\r\n        w = w - margin.left - margin.right;\r\n\r\n        self.scaleX.range([0, w]);\r\n\r\n        self.svg\r\n            .attr(<span style=\"color:#A31515;\">&quot;width&quot;</span>, w)\r\n            .attr(<span style=\"color:#A31515;\">&quot;viewBox&quot;</span>, <span style=\"color:#A31515;\">&quot;0 0 &quot;</span> + w + <span style=\"color:#A31515;\">&quot; 50&quot;</span>);\r\n    }\r\n\r\n\r\n    self.run = <span style=\"color:Blue;\">function</span> () {\r\n        runner();\r\n    };\r\n};\r\n\r\nappNs.TimeSeriesChart.prototype.initializeData = <span style=\"color:Blue;\">function</span> (elementCount) {\r\n    <span style=\"color:Blue;\">var</span> self = <span style=\"color:Blue;\">this</span>;\r\n    <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">var</span> i = 0; i &lt; elementCount; i++) {\r\n        self.data.push(<span style=\"color:Blue;\">new</span> self.DataPoint(self.key++, 0));\r\n    }\r\n};\r\n\r\nappNs.TimeSeriesChart.prototype.getData = <span style=\"color:Blue;\">function</span> (x) {\r\n    <span style=\"color:Blue;\">return</span> 5 * (Math.cos(x / 1.5) + 1);\r\n};\r\n\r\nappNs.TimeSeriesChart.prototype.start = <span style=\"color:Blue;\">function</span> () {\r\n    <span style=\"color:Blue;\">var</span> self = <span style=\"color:Blue;\">this</span>;\r\n    <span style=\"color:Blue;\">if</span> (!self.isRunning) {\r\n        self.counter = setInterval(self.run, 150);\r\n    }\r\n    self.isRunning = <span style=\"color:Blue;\">true</span>;\r\n};\r\n\r\nappNs.TimeSeriesChart.prototype.stop = <span style=\"color:Blue;\">function</span> () {\r\n    <span style=\"color:Blue;\">var</span> self = <span style=\"color:Blue;\">this</span>;\r\n    clearInterval(self.counter);\r\n    self.isRunning = <span style=\"color:Blue;\">false</span>;\r\n};\r\n\r\nappNs.chart = <span style=\"color:Blue;\">new</span> appNs.TimeSeriesChart(50, <span style=\"color:#A31515;\">&#39;.chart-container&#39;</span>, 25);\r\n</pre></div>\r\n\r\n<p>I have set aside an exercise for myself to come back and re-create this strictly in html and css. </p>\r\n\r\n<p>In the meantime I also intend to dive deeper into the D3 library and continue to blog along the way!</p>\r\n","MarkdownContent":null,"Id":"73615181-963f-46b2-975d-dc934d527cfc","PublishDate":"2013-12-21T00:00:00","Tags":[],"Title":"D3 Streaming Time Series","Comments":[],"ScriptDependencies":["/artifacts/d3-streaming-time-series/model.js"],"SearchableContent":""}