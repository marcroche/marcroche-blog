{"Author":"","Content":"<div>\r\n  <p>After looking at the basics of Expression Trees it is time for a practical example. A scenario that will likely come up when you start building Linq queries is the ability to generate dynamic expressions at runtime. In the case of the Where clause we can keep chaining our expressions to build up \"AND\" conditions:</p>\r\n  <pre><![CDATA[\r\nstatic void Main()\r\n{\r\n\tList&lt;Car&gt; Cars = new List&lt;Car&gt;\r\n\t{\r\n\t\tnew Car { Make=\"Ford\", Model=\"Pinto\", Color=\"Grey\", Year=\"1975\" },\r\n\t\tnew Car { Make=\"GMC\", Model=\"Gremlin\", Color=\"White\", Year=\"1972\" },\r\n\t\tnew Car { Make=\"Infiniti\", Model=\"G35\", Color=\"Silver\", Year=\"1995\" },\r\n\t\tnew Car { Make=\"BMW\", Model=\"335i\", Color=\"White\", Year=\"2011\" },\r\n\t\tnew Car { Make=\"Toyota\", Model=\"Highlander\", Color=\"White\", Year=\"2008\" }\r\n\t};\r\n\r\n\t// We are going to build up the following where clause:\r\n\t// Cars.Where(x =&gt; x.Color == \"White\" &amp;&amp; x.Make == \"Toyota\");\r\n\tIEnumerable&lt;Car&gt; cars = Cars.Where(x =&gt; x.Color == \"White\");\r\n\tcars = Cars.Where(x =&gt; x.Make == \"Toyota\");\r\n\r\n\tcars.ToList().ForEach(x =&gt; Console.WriteLine(x.Make + \" \" + x.Color));\r\n\tConsole.ReadKey();\r\n}\r\n\t\t\t]]></pre>\r\n  <p>Not so bad huh? However if we need something other than \"AND\" or we need nested conditions it gets a bit trickier. In the example below we will create an \"OR\" condition to filter the Cars to the ones that are either \"Toyota OR Silver\":</p>\r\n  <pre><![CDATA[\r\nstatic void Main()\r\n{\r\n\tList&lt;Car&gt; Cars = new List&lt;Car&gt;\r\n\t{\r\n\t\tnew Car { Make=\"Ford\", Model=\"Pinto\", Color=\"Grey\", Year=\"1975\" },\r\n\t\tnew Car { Make=\"GMC\", Model=\"Gremlin\", Color=\"White\", Year=\"1972\" },\r\n\t\tnew Car { Make=\"Infiniti\", Model=\"G35\", Color=\"Silver\", Year=\"1995\" },\r\n\t\tnew Car { Make=\"BMW\", Model=\"335i\", Color=\"White\", Year=\"2011\" },\r\n\t\tnew Car { Make=\"Toyota\", Model=\"Highlander\", Color=\"White\", Year=\"2008\" }\r\n\t};\r\n\r\n\tParameterExpression carParamater = Expression.Parameter(typeof(Car));\r\n\r\n\tExpression&lt;Func&lt;Car, bool&gt;&gt; predicate = Expression.Lambda&lt;Func&lt;Car, bool&gt;&gt;(\r\n\t\tExpression.Equal(\r\n\t\t\tExpression.PropertyOrField(carParamater, \"Make\"),\r\n\t\t\tExpression.Constant(\"Toyota\")),\r\n\t\t\tcarParamater);\r\n\r\n\tExpression&lt;Func&lt;Car, bool&gt;&gt; predicate2 = Expression.Lambda&lt;Func&lt;Car, bool&gt;&gt;(\r\n\t\tExpression.Equal(\r\n\t\t\tExpression.PropertyOrField(carParamater, \"Color\"),\r\n\t\t\tExpression.Constant(\"Silver\")),\r\n\t\t\tcarParamater);\r\n\r\n\tExpression&lt;Func&lt;Car, bool&gt;&gt; body = Expression.Lambda&lt;Func&lt;Car, bool&gt;&gt;(\r\n\t\tExpression.OrElse(predicate.Body, predicate2.Body),\r\n\t\tcarParamater);\r\n\r\n\tCars.Where(body.Compile()).ToList().ForEach(x =&gt; Console.WriteLine(x.Make + \" \" + x.Color));\r\n\tConsole.ReadKey();\r\n}\r\n\t\t\t]]></pre>\r\n  <p>Pretty neat. From this simple example a pattern could be extracted for reusable code. However for the purpose of this article we wanted to examine the construction of the Expression Tree one line at a time. Good luck incorporating Expression Trees into your own code and check back often for new updates!</p>\r\n</div>","Id":"e8eb83a3-fd9c-4933-98c1-b65bfafb41f3","PublishDate":"2012-07-21T00:00:00","Tags":null,"Title":"Build a Dynamic Where Clause with Expression Trees","Comments":[],"SearchableContent":""}