<BlogPost title="Closures in C#" publishdate="8/26/2012 12:00:00 AM" id="fcf36fec-b36f-4dc5-8e60-a07de6ded1ee" author="">
  <Content>
    <div>
      <p>Closures are a powerful feature supported in functional programming languages from Javascript to Ruby. They add a unique construct to allow us to express coding patterns in a more clean and concise way.</p>
      <p>Closures introduce the concept of a function as a first class citizen in your code. What this means is that the function can be thought of as a data type that can be declared, assigned, passed around and invoked.</p>
      <p>The good thing for us .Net developers is that they are also available in C#. In fact you may be using them and not even know it!</p>
      <p>
        <strong>"What is a closure?"</strong>
      </p>
      <p>One brief definition is "a function and its referencing environment". A referencing environment is the context that the closure is declared in and any "free variables" declared there. The free variables that are declared in the referencing context can then be bound and referenced from within the closure.</p>
      <p>Making sense?!? It�s a little tough to explain in words alone so let�s look at some code!</p>
      <pre><![CDATA[
static void Main()
{
	// Declare a free variable in the main context
	List&lt;string&gt; freeVariable = new List&lt;string&gt;();

	// Declare an action that accesses the variable 
	// from the main or referencing context
	Action closure = () =&gt; {
		freeVariable.Add("String 1");
		freeVariable.Add("String 2");
		freeVariable.Add("String 3");
	};

	// Execute the Action
	closure();

	// Results
	freeVariable.ForEach(x =&gt; Console.WriteLine("{0}", x));
	Console.ReadKey();
}
			]]></pre>
      <p>And the results:</p>
      <img src="/images/Posts/ClosuresInCSharp/screenshot.png" />
      <p>What has happened is that the variable declared in the referening context was modified in the closure. The modifications were then persisted back to the referencing context!</p>
      <p>Hopefully this brief introduction will help make it clear what closures are and how they can benefit us!</p>
    </div>
  </Content>
</BlogPost>