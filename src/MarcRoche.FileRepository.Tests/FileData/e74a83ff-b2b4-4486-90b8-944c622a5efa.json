{"Author":"","Content":"<div>\r\n  <p>When working with Linq it often becomes beneficial to have types that implement the IEnumerable interface or have methods that return an IEnumerable. This allows us to work with the extension methods in the System.Linq namespace and to support the use of our type or method in the foreach loop.</p>\r\n  <p>When we iterate through an IEnumerable sequence we would like to only generate the sequence items as we need them. And this is exaclty what yield return does!</p>\r\n  <p>When we specify yield return the compiler will actually generate a set of classes to maintain the state of the IEnumerable you are working with. The advantage this gives us is when we are in a foreach loop the classes can store the state of the current iteration and refer back to it on the next time through.\r\n        </p>\r\n  <p>In this example I will pay a little homage to Jasper Johns with our \"NoughtToNine\" method :)</p>\r\n  <p>We have a simple method that yield returns the even numbers from 0 to 9 as an IEnumerable&lt;int&gt;.</p>\r\n  <pre><![CDATA[\r\npublic static IEnumerable&lt;int&gt; EvenNumbersFromNoughtToNine()\r\n{\r\n\tfor (int i = 0; i &lt; 10; i += 2)\r\n\t{\r\n\t\tyield return i;\r\n\t}\r\n}\r\n            ]]></pre>\r\n  <p>\r\n            If we use this method in a foreach loop we get some interesting results:\r\n        </p>\r\n  <pre><![CDATA[\r\nstatic void Main(string[] args)\r\n{\r\n\tforeach (int i in EvenNumbersFromNoughtToNine())\r\n\t{\r\n\t\tConsole.WriteLine(i);\r\n\t}\r\n\r\n\tConsole.ReadKey();\r\n}\r\n            ]]></pre>\r\n  <p>If we set a breakpoint inside our EvenNumbersFromNaughtToNine method we can examine what is happening. On each iteration of the foreach loop in Main, we can see that we are actually returning only the next number in the sequence. The compiler generated classes have maintained the state of the IEnumerable and allowed us to generate only the next item in the sequence and return that single value.</p>\r\n  <p>In fact this implementation may show how yield return functions more clearly. Set a breakpoint on each line and run Main again!</p>\r\n  <pre><![CDATA[\r\npublic static IEnumerable&lt;int&gt; EvenNumbersFromNoughtToNine()\r\n{\r\n\tyield return 0;\r\n\tyield return 2;\r\n\tyield return 4;\r\n\tyield return 6;\r\n\tyield return 8;\r\n}\r\n            ]]></pre>\r\n  <p>Pretty neat? We only hit each next line as we iterate through!</p>\r\n  <p>That wraps up the explanation of C#'s yield return. Now get out there and start implementing IEnumerable :)</p>\r\n</div>","Id":"e74a83ff-b2b4-4486-90b8-944c622a5efa","PublishDate":"2012-04-26T00:00:00","Tags":null,"Title":"C# Yield Return Explained","Comments":[],"SearchableContent":""}